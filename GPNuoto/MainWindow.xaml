<Controls:MetroWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:local="clr-namespace:GPNuoto"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:dockablz="clr-namespace:Dragablz.Dockablz;assembly=Dragablz"
        xmlns:dragablz="clr-namespace:Dragablz;assembly=Dragablz"
        xmlns:ignore="http://www.galasoft.ch/ignore"
        xmlns:cnv="clr-namespace:GPNuoto.Converters"
        xmlns:ControlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf" xmlns:Converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf" x:Class="GPNuoto.MainWindow"
        mc:Ignorable="d ignore"
        WindowStartupLocation="CenterScreen"
        WindowState="Maximized"
        ShowIconOnTitleBar="True"
        ShowTitleBar="True"
        Title="GP NUOTO" Background="White" Icon="Documenti/IconaGP.ico">
    

    <Controls:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Skins/MainSkin.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <cnv:NotEmptyToVisibilityConverter  x:Key="NotEmptyToVisibility" />
            <cnv:NotNullToVisibilityConverter  x:Key="NotNullToVisibility" />
            <BooleanToVisibilityConverter  x:Key="BoolToVisibility" />
            <cnv:BooleanToCollapsedConverter  x:Key="BoolToCollapsed" />

                <!--<Style x:Key="PopupBoxStyle1" TargetType="{x:Type materialDesign:PopupBox}">
                <Setter Property="Opacity" Value="0.5"/>
                <Style.BasedOn>
                    <Style TargetType="{x:Type materialDesign:PopupBox}">
                        <Setter Property="ToggleContent">
                            <Setter.Value>
                                <materialDesign:PackIcon Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type materialDesign:PopupBox}}}" Height="24" Kind="Login" Margin="4,0" Width="24"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="materialDesign:RippleAssist.Feedback" Value="{DynamicResource MaterialDesignFlatButtonRipple}"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="materialDesign:ShadowAssist.ShadowDepth" Value="Depth3"/>
                        <Setter Property="FontWeight" Value="Normal"/>
                        <Setter Property="Padding" Value="0,8"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type materialDesign:PopupBox}">
                                    <ControlTemplate.Resources>
                                        <Style x:Key="ToggleButtonStyle" TargetType="{x:Type ToggleButton}">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <materialDesign:Ripple ClipToBounds="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" materialDesign:RippleAssist.IsCentered="True" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                        <Style x:Key="{x:Type Separator}" TargetType="{x:Type Separator}">
                                            <Style.BasedOn>
                                                <Style TargetType="{x:Type Separator}">
                                                    <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}"/>
                                                    <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignSelection}"/>
                                                    <Setter Property="MinHeight" Value="1"/>
                                                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                    <Setter Property="Height" Value="16"/>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Separator}">
                                                                <Rectangle Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" Height="1" VerticalAlignment="Center"/>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </Style.BasedOn>
                                        </Style>
                                    </ControlTemplate.Resources>
                                    <Grid>
                                        <ToggleButton x:Name="PART_Toggle" Cursor="Hand" ContentTemplate="{TemplateBinding ToggleContentTemplate}" Content="{TemplateBinding ToggleContent}" IsChecked="{Binding IsPopupOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center">
                                            <ToggleButton.Style>
                                                <Style TargetType="{x:Type ToggleButton}">
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <materialDesign:Ripple ClipToBounds="False" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" materialDesign:RippleAssist.IsCentered="True" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ToggleButton.Style>
                                        </ToggleButton>
                                        <ControlzEx:PopupEx x:Name="PART_Popup" AllowsTransparency="True" CustomPopupPlacementCallback="{Binding PopupPlacementMethod, RelativeSource={RelativeSource TemplatedParent}}" HorizontalOffset="5" IsOpen="{Binding IsPopupOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="Fade" Placement="Custom" VerticalOffset="5">
                                            <materialDesign:Card ContentTemplate="{TemplateBinding PopupContentTemplate}" Content="{TemplateBinding PopupContent}" RenderOptions.ClearTypeHint="Enabled" Foreground="{DynamicResource MaterialDesignBody}" FontWeight="Normal" FontSize="15" Margin="5" Padding="{TemplateBinding Padding}">
                                                <materialDesign:Card.Resources>
                                                    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
                                                        <Setter Property="VerticalContentAlignment" Value="Bottom"/>
                                                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                                        <Setter Property="Padding" Value="16,0,16,16"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                                                        <Setter Property="Template">
                                                            <Setter.Value>
                                                                <ControlTemplate TargetType="{x:Type Button}">
                                                                    <Grid>
                                                                        <VisualStateManager.VisualStateGroups>
                                                                            <VisualStateGroup x:Name="CommonStates">
                                                                                <VisualStateGroup.Transitions>
                                                                                    <VisualTransition From="{x:Null}" GeneratedDuration="0:0:0.3" Storyboard="{x:Null}" To="Normal">
                                                                                        <VisualTransition.GeneratedEasingFunction>
                                                                                            <CircleEase EasingMode="EaseOut"/>
                                                                                        </VisualTransition.GeneratedEasingFunction>
                                                                                    </VisualTransition>
                                                                                </VisualStateGroup.Transitions>
                                                                                <VisualState x:Name="Normal"/>
                                                                                <VisualState x:Name="MouseOver">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Duration="0" To="0.1" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="MouseOverBorder"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                                <VisualState x:Name="Disabled">
                                                                                    <Storyboard>
                                                                                        <DoubleAnimation Duration="0" To="0.48" Storyboard.TargetProperty="Opacity"/>
                                                                                    </Storyboard>
                                                                                </VisualState>
                                                                            </VisualStateGroup>
                                                                        </VisualStateManager.VisualStateGroups>
                                                                        <Border x:Name="MouseOverBorder" Opacity="0">
                                                                            <Border.Background>
                                                                                <TemplateBinding Property="Foreground">
                                                                                    <TemplateBinding.Converter>
                                                                                        <Converters:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                                    </TemplateBinding.Converter>
                                                                                </TemplateBinding>
                                                                            </Border.Background>
                                                                        </Border>
                                                                        <materialDesign:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" MinHeight="48" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                            <materialDesign:Ripple.Feedback>
                                                                                <TemplateBinding Property="Foreground">
                                                                                    <TemplateBinding.Converter>
                                                                                        <Converters:BrushRoundConverter HighValue="White" LowValue="Black"/>
                                                                                    </TemplateBinding.Converter>
                                                                                </TemplateBinding>
                                                                            </materialDesign:Ripple.Feedback>
                                                                        </materialDesign:Ripple>
                                                                    </Grid>
                                                                </ControlTemplate>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Style>
                                                </materialDesign:Card.Resources>
                                            </materialDesign:Card>
                                        </ControlzEx:PopupEx>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.BasedOn>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" Value="1"/>
                    </Trigger>
                </Style.Triggers>
            </Style>-->
        </ResourceDictionary>
    </Controls:MetroWindow.Resources>
    <Controls:MetroWindow.DataContext>
        <Binding Path="Main" Source="{StaticResource Locator}"/>
    </Controls:MetroWindow.DataContext>
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <Controls:WindowCommands.DataContext>
                <Binding Path="CurrentUser" Source="{StaticResource Locator}"/>
            </Controls:WindowCommands.DataContext>
            <TextBlock Text="{Binding user, Mode=TwoWay}"></TextBlock>
            <materialDesign:PopupBox Style="{DynamicResource PopupBoxStyle1}">
                <StackPanel>
                    <Button>
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <materialDesign:PackIcon Kind="Account" Height="24" Width="24" />
                                <TextBlock>Profilo</TextBlock>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button Visibility="{Binding IsLogin, Mode=TwoWay, Converter={StaticResource BoolToVisibility}}" Command="{Binding Utente.Logout, Mode=OneWay, Source={StaticResource Locator}}">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <materialDesign:PackIcon Kind="Logout" Height="24" Width="24" />
                                <TextBlock>Logout</TextBlock>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button Visibility="{Binding IsLogin, Mode=TwoWay, Converter={StaticResource BoolToCollapsed}}" Command="{Binding Utente.Login, Mode=OneWay, Source={StaticResource Locator}}">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <materialDesign:PackIcon Kind="Login" Height="24" Width="24" />
                                <TextBlock>Login</TextBlock>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button x:Name="Informazioni" Click="Informazioni_Click">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <materialDesign:PackIcon Kind="InformationVariant" Height="24" Width="24" />
                                <TextBlock>Informazioni</TextBlock>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button x:Name="ChiudiApplicazione" Click="ChiudiApplicazione_Click">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal">
                                <materialDesign:PackIcon Kind="ExitToApp" Height="24" Width="24" />
                                <TextBlock>Esci</TextBlock>
                            </StackPanel>
                        </Button.Content>
                    </Button>
                </StackPanel>
            </materialDesign:PopupBox>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>



    <!--TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="200">GP NUOTO</-->
    <dockablz:Layout DataContext="{Binding CurrentUser, Source={StaticResource Locator}}" Visibility="{Binding IsLogin, Converter={StaticResource BoolToVisibility}}" IsFloatDropZoneEnabled="False">
        <dragablz:TabablzControl BorderThickness="0"
			Margin="0,-1,0,1" x:Name="dockMenu">
            <!--<dragablz:TabablzControl.InterTabController>
                <dragablz:InterTabController IsHitTestVisible="False" />
            </dragablz:TabablzControl.InterTabController>-->

            <TabItem Header="Accoglienza" x:Name="Accoglienza" >
                <local:FrontendView Visibility="{Binding Visibility, ElementName=Accoglienza}"/>
            </TabItem>

            <TabItem Header="Corsi" x:Name="ProgettazioneCorsi">
                <local:ProgettaCorsiView Visibility="{Binding Visibility, ElementName=ProgettazioneCorsi}"/>
            </TabItem>
            
            <TabItem  Header="Contabilità" x:Name="Contabilita">
                <local:ContabilitaMainView Visibility="{Binding Visibility, ElementName=Contabilita}"/>
            </TabItem>

            <TabItem  Header="Riepiloghi" x:Name="Riepiloghi">
                <local:RiepiloghiView />
            </TabItem>

            <TabItem Header="Configurazione" x:Name="Configurazione">
                <local:ConfigurazioneView Visibility="{Binding Visibility, ElementName=Configurazione}"/>
            </TabItem>
        </dragablz:TabablzControl>
    </dockablz:Layout>

</Controls:MetroWindow>

